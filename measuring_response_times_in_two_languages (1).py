# -*- coding: utf-8 -*-
"""Measuring Response Times in Two Languages

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cEyBy8wl2vC_QgjcWYngpFANgOv4Dfid
"""

# -*- coding: utf-8 -*-
"""
Created on Fri Oct  7 12:12:48 2022

@author: crispynacho
"""

"""
    create word bank of spanish and english words, in lists
        index 0 and 1 are words
        index 2 says if english or spanish

    present the user with the tuples (random order) and ask them if the words are similar or
    opposites

    note when the tuple is english or spanish, and save response times into a list
        save as dictionary, key is name, values are average response time and percent right

"""
import random
import time

#stores the string that will appear, the correct answer, and the language it is in (e for English, s for Spanish)
word_bank = [['negro y blanco', 1,"s"], ['phone and tablet',2,"e"], ['cat and dog',1,"e"], ['gato y perro',1,"s"],
             ['anaranjado y rojo',2,"s"], ['in and out',1,"e"], ['novel and new',2,"e"], ['novel and book',2,"e"],
             ['mesa y silla',2,"s"], ['white and black', 1,"e"] ]
res = []
count = 0

print("Enter 1 if the two words are opposites or 2 if the two words are similar (enter to start): ")
enter = input("")

for x in range(10):

    t1 = time.time()                                    #saves the time when the prompt is given
    a = int(input(str(word_bank[x][0]) +"\n"))          #the user's answer
    t2 = time.time()                                    #saves the time when user inputs answer

    tottime = t2 - t1                                   #finds the difference in time

    correct = "F"

    if(word_bank[x][1] == a):
        correct = "T"

    res.append((word_bank[x][2],tottime,correct))       #saves the language, response time, and if answer was correct
                                                        #in the results
    count+=1;
    if (count == 10):
      break
      1
print()
print(res)



def findavg(l):
  avg = 0
  tcount = 0
  for x in range(10):
    avg += l[x][1]
    if (l[x][2] == "T"):
      tcount += 1
  return [round(avg/10.0,3), round(tcount/10.0,3)]



# Collected Data:
luis = [('e', 3.752596139907837, 'T'), ('s', 2.118557929992676, 'T'), ('e', 4.296929597854614, 'F'), ('s', 2.7727794647216797, 'F'), ('s', 3.739171266555786, 'F'), ('e', 2.06973934173584, 'F'), ('e', 9.200099468231201, 'T'), ('e', 3.928907632827759, 'T'), ('s', 3.476506471633911, 'T'), ('e', 3.592923641204834, 'T')]
charlotte = [('e', 6.581396102905273, 'T'), ('s', 3.9968459606170654, 'T'), ('e', 2.6362104415893555, 'T'), ('s', 1.7569553852081299, 'T'), ('s', 3.4029200077056885, 'T'), ('e', 2.1584198474884033, 'T'), ('e', 2.53769850730896, 'F'), ('e', 2.06760573387146, 'F'), ('s', 4.188889980316162, 'T'), ('e', 3.501803159713745, 'T')]
maeve = [('e', 5.514760971069336, 'F'), ('s', 9.603026866912842, 'F'), ('e', 6.611107587814331, 'T'), ('s', 1.734140396118164, 'T'), ('s', 9.095298051834106, 'T'), ('e', 2.738919734954834, 'T'), ('e', 3.587374448776245, 'T'), ('e', 2.5371832847595215, 'F'), ('s', 5.278119802474976, 'T'), ('e', 4.855315208435059, 'T')]
alex = [('s', 4.057497501373291, 'T'), ('e', 4.39263916015625, 'T'), ('e', 4.399857521057129, 'T'), ('s', 2.175861120223999, 'T'), ('s', 3.5294604301452637, 'T'), ('e', 2.2824814319610596, 'T'), ('e', 6.50363302230835, 'F'), ('e', 2.654801368713379, 'T'), ('s', 8.778941631317139, 'T'), ('e', 1.833866834640503, 'T')]
nancy = [('s', 3.3485231399536133, 'T'), ('e', 3.370887041091919, 'T'), ('e', 2.213714361190796, 'T'), ('s', 4.551104784011841, 'T'), ('s', 1.9185595512390137, 'T'), ('e', 1.5343832969665527, 'T'), ('e', 1.9818620681762695, 'T'), ('e', 2.007317543029785, 'T'), ('s', 3.2493090629577637, 'F'), ('e', 2.667804002761841, 'T')]
bri = [('s', 4.299175262451172, 'T'), ('e', 6.920611143112183, 'F'), ('e', 4.4732346534729, 'T'), ('s', 3.887369394302368, 'T'), ('s', 3.4827382564544678, 'T'), ('e', 2.2354750633239746, 'T'), ('e', 4.400411128997803, 'F'), ('e', 5.594939470291138, 'T'), ('s', 5.7274229526519775, 'T'), ('e', 2.285184383392334, 'T')]
ava = [('s', 1.592010259628296, 'T'), ('e', 1.306917667388916, 'T'), ('e', 1.4302005767822266, 'T'), ('s', 2.273052215576172, 'T'), ('s', 1.9843616485595703, 'F'), ('e', 1.514195442199707, 'T'), ('e', 3.873723030090332, 'F'), ('e', 1.370560884475708, 'T'), ('s', 5.281891345977783, 'F'), ('e', 1.3382759094238281, 'T')]
jade = [('s', 4.507455825805664, 'T'), ('e', 2.7430472373962402, 'F'), ('e', 1.9036083221435547, 'T'), ('s', 3.215559959411621, 'T'), ('s', 3.075545072555542, 'T'), ('e', 1.7142481803894043, 'T'), ('e', 1.8909358978271484, 'T'), ('e', 1.4854021072387695, 'T'), ('s', 6.865164518356323, 'T'), ('e', 1.535588026046753, 'T')]
annabelle = [('s', 8.087558031082153, 'T'), ('e', 6.082407712936401, 'T'), ('e', 4.483301401138306, 'T'), ('s', 5.4353837966918945, 'T'), ('s', 4.772935628890991, 'T'), ('e', 2.2127158641815186, 'T'), ('e', 8.54786229133606, 'F'), ('e', 3.287508726119995, 'T'), ('s', 6.397152662277222, 'T'), ('e', 2.1999831199645996, 'T')]
bhavya = [('s', 8.62398362159729, 'T'), ('e', 5.882036209106445, 'T'), ('e', 1.755159616470337, 'T'), ('s', 1.7452244758605957, 'T'), ('s', 4.103679656982422, 'T'), ('e', 2.77026629447937, 'T'), ('e', 2.8773107528686523, 'F'), ('e', 3.6566383838653564, 'T'), ('s', 3.620044231414795, 'T'), ('e', 2.2716479301452637, 'T')]
will = [('s', 3.9184634685516357, 'T'), ('e', 3.097075939178467, 'T'), ('e', 2.147573232650757, 'F'), ('s', 2.288702964782715, 'F'), ('s', 3.187006711959839, 'T'), ('e', 1.6705365180969238, 'T'), ('e', 1.9790208339691162, 'T'), ('e', 4.137258291244507, 'T'), ('s', 10.100825786590576, 'F'), ('e', 5.8686745166778564, 'T')]
balex = [('s', 4.0205957889556885, 'T'), ('e', 2.19462251663208, 'T'), ('e', 4.559397220611572, 'T'), ('s', 3.5262210369110107, 'T'), ('s', 3.3809404373168945, 'T'), ('e', 1.1445369720458984, 'T'), ('e', 1.7958965301513672, 'F'), ('e', 2.838149309158325, 'T'), ('s', 3.5700042247772217, 'T'), ('e', 2.262493371963501, 'T')]
jacob = [('s', 2.2221596240997314, 'T'), ('e', 1.02779221534729, 'T'), ('e', 1.9032106399536133, 'T'), ('s', 2.249870777130127, 'T'), ('s', 1.6831583976745605, 'T'), ('e', 3.060943841934204, 'T'), ('e', 1.6332662105560303, 'T'), ('e', 1.6734473705291748, 'T'), ('s', 3.0633716583251953, 'F'), ('e', 4.706502199172974, 'T')]
cassidy = [('s', 5.268706321716309, 'T'), ('e', 2.3693976402282715, 'T'), ('e', 1.8603694438934326, 'T'), ('s', 3.2300121784210205, 'F'), ('s', 1.8087892532348633, 'T'), ('e', 1.4577741622924805, 'T'), ('e', 8.754003763198853, 'T'), ('e', 2.2021889686584473, 'T'), ('s', 1.5605933666229248, 'F'), ('e', 1.5331602096557617, 'F')]
henry = [('s', 4.350006103515625, 'T'), ('e', 4.352404832839966, 'T'), ('e', 2.964215040206909, 'F'), ('s', 4.802862644195557, 'F'), ('s', 3.061981678009033, 'T'), ('e', 2.0083436965942383, 'T'), ('e', 1.8188881874084473, 'T'), ('e', 2.0029478073120117, 'T'), ('s', 2.5878639221191406, 'F'), ('e', 4.242721796035767, 'T')]
emily = [('s', 3.625606060028076, 'T'), ('e', 2.098964214324951, 'T'), ('e', 2.8650829792022705, 'F'), ('s', 3.6370177268981934, 'F'), ('s', 6.50757098197937, 'T'), ('e', 1.8697197437286377, 'T'), ('e', 3.0061421394348145, 'T'), ('e', 3.2484829425811768, 'T'), ('s', 7.705360651016235, 'F'), ('e', 1.478633165359497, 'T')]
milena = [('s', 3.3146040439605713, 'T'), ('e', 5.890731334686279, 'T'), ('e', 1.920426845550537, 'T'), ('s', 1.6504273414611816, 'T'), ('s', 1.8575809001922607, 'T'), ('e', 2.4681143760681152, 'T'), ('e', 1.6301243305206299, 'T'), ('e', 1.8452250957489014, 'T'), ('s', 2.9397313594818115, 'T'), ('e', 2.082597494125366, 'T')]
andrew = [('s', 2.611664056777954, 'T'), ('e', 2.9244744777679443, 'T'), ('e', 2.158412456512451, 'F'), ('s', 2.200324058532715, 'F'), ('s', 5.147505521774292, 'T'), ('e', 1.7016212940216064, 'T'), ('e', 3.870107650756836, 'T'), ('e', 1.7299551963806152, 'T'), ('s', 6.085423707962036, 'T'), ('e', 1.9877469539642334, 'T')]
luz = [('s', 2.71952223777771, 'T'), ('e', 2.815760374069214, 'F'), ('e', 1.6369037628173828, 'T'), ('s', 1.6556344032287598, 'T'), ('s', 1.9755566120147705, 'F'), ('e', 2.6521146297454834, 'T'), ('e', 3.7353787422180176, 'F'), ('e', 2.6485629081726074, 'T'), ('s', 1.832341194152832, 'F'), ('e', 2.0367090702056885, 'T')]


names = ["Luis","Charlotte","Maeve","Alex","Nancy","Bri","Ava","Jade","Annabelle","Bhavya","Will","Balex","Jacob","Cassidy", "Henry","Emily","Milena","Andrew", "Luz"]
data = [luis,charlotte,maeve,alex,nancy,bri,ava,jade,annabelle,bhavya,will,balex,jacob,cassidy,henry,emily,milena,andrew,luz]
datamp = {}
fluencys = [5,3,2,2,1,2,4,3,2,2,2,2,1,1,4,1,5,2,5]
times = []
acc = []

for x in range(len(names)):
  times.append(findavg(data[x])[0])
  acc.append(findavg(data[x])[1])



import pandas as pd

data = {'Name' : names, 'Response Average (sec)' : times, 'Accuracy' : acc, 'Fluency' : fluencys}
df = pd.DataFrame(data)

df



import matplotlib.pyplot as plt

# plt.figure(figsize=(8, 6))
plt.scatter(fluencys, acc, marker='o', color='b', label='Accuracy vs Fluency')

plt.xlabel('Fluency')
plt.ylabel('Accuracy')
plt.title('Accuracy vs Fluency')

plt.grid(True)
plt.legend()
plt.show()

plt.scatter(fluencys, times, marker='o', color='b', label='Accuracy vs Fluency')

plt.xlabel('Fluency')
plt.ylabel('Response Time')
plt.title('Response Time vs Fluency')

plt.grid(True)
plt.legend()
plt.show()

